{
  parserClass="net.fallingangel.jimmerdto.language.parser.DTOParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="DTO"
  psiImplClassSuffix="Impl"
  psiPackage="net.fallingangel.jimmerdto.language.psi"
  psiImplPackage="net.fallingangel.jimmerdto.language.psi.impl"

  elementTypeHolderClass="net.fallingangel.jimmerdto.language.psi.DTOTypes"
  elementTypeClass="net.fallingangel.jimmerdto.language.psi.DTOElementType"
  tokenTypeClass="net.fallingangel.jimmerdto.language.psi.DTOTokenType"

  tokens=[
    COMMA=","
    DOT="."
    AT="@"
    EQUALS="="
    COLON=":"
    SEMICOLON=";"
    PAREN_L="("
    PAREN_R=")"
    BRACKET_L="["
    BRACKET_R="]"
    BRACE_L="{"
    BRACE_R="}"

    IMPORT_KEYWORD="import"
    AS_KEYWORD="as"

    BOOLEAN_CONSTANT="regexp:true|false"
    NULL_CONSTANT="null"
    INTEGER_CONSTANT="regexp:\\d+"
    FLOAT_CONSTANT="regexp:\\d+\\.\\d+"
    STRING_CONSTANT="regexp:\"[^\"]*\""
    CHAR_CONSTANT="regexp:'[^']'"
  ]
}

dto-file ::= import-statement* dto* LINE_COMMENT* BLOCK_COMMENT*

import-statement ::= "import" IDENTIFIER ("." IDENTIFIER)+ (type-alias | grouped-type-alias)?

grouped-type-alias ::= "." "{" IDENTIFIER type-alias? ("," IDENTIFIER type-alias?)* "}"

type-alias ::= "as" IDENTIFIER

dto ::= annotation* MODIFIER* IDENTIFIER dto-supers? dto-body

dto-supers ::= ":" IDENTIFIER ("," IDENTIFIER)*

dto-body ::= "{" explicit-prop* "}"

explicit-prop ::= IDENTIFIER ("," | ";")?

/// GLOBAL ///
// annotation
annotation ::= annotation-constructor ("(" (annotation-value | annotation-parameter) ("," annotation-parameter)* ")")?

annotation-constructor ::= "@" qualified-name

nest-annotation ::= qualified-name "(" ((annotation-value | annotation-parameter) ("," annotation-parameter)*)? ")"

// annotation parameter
annotation-parameter ::= IDENTIFIER "=" annotation-value

annotation-value ::= CHAR_CONSTANT | STRING_CONSTANT |
             INTEGER_CONSTANT | FLOAT_CONSTANT |
             BOOLEAN_CONSTANT | NULL_CONSTANT |
             annotation | nest-annotation | annotation-array-value

annotation-array-value ::= "[" (annotation-value ("," annotation-value)*)? "]" | "{" (annotation-value ("," annotation-value)*)? "}"

{
  parserClass="net.fallingangel.jimmerdto.language.parser.DTOParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="DTO"
  psiImplClassSuffix="Impl"
  psiPackage="net.fallingangel.jimmerdto.language.psi"
  psiImplPackage="net.fallingangel.jimmerdto.language.psi.impl"

  elementTypeHolderClass="net.fallingangel.jimmerdto.language.psi.DTOTypes"
  elementTypeClass="net.fallingangel.jimmerdto.language.psi.DTOElementType"
  tokenTypeClass="net.fallingangel.jimmerdto.language.psi.DTOTokenType"

  tokens=[
    COMMA=","
    DOT="."
    AT="@"
    EQUALS="="
    COLON=":"
    SEMICOLON=";"
    HASH="#"
    PLUS="+"
    MINUS="-"
    OPTIONAL="?"
    REQUIRED="!"
    ASTERISK="*"
    POWER="^"
    DOLLAR="$"
    ARROW="->"
    PAREN_L="("
    PAREN_R=")"
    BRACKET_L="["
    BRACKET_R="]"
    ANGLE_BRACKET_L="<"
    ANGLE_BRACKET_R=">"
    BRACE_L="{"
    BRACE_R="}"

    IMPORT_KEYWORD="import"
    AS_KEYWORD="as"

    BOOLEAN_CONSTANT="regexp:true|false"
    NULL_CONSTANT="null"
    INTEGER_CONSTANT="regexp:\\d+"
    FLOAT_CONSTANT="regexp:\\d+\\.\\d+"
    STRING_CONSTANT="regexp:\"[^\"]*\""
    CHAR_CONSTANT="regexp:'[^']'"
  ]
}

dto-file ::= import-statement* dto* LINE_COMMENT* BLOCK_COMMENT*

import-statement ::= "import" IDENTIFIER ("." IDENTIFIER)+ (alias | grouped-type-alias)?

grouped-type-alias ::= "." "{" IDENTIFIER alias? ("," IDENTIFIER alias?)* "}"

dto ::= annotation* MODIFIER* IDENTIFIER dto-supers? dto-body

dto-supers ::= ":" IDENTIFIER ("," IDENTIFIER)*

dto-body ::= "{" explicit-prop* "}"

explicit-prop ::= (user-prop | macro | positive-prop | alias-group | negative-prop) ("," | ";")?

macro ::= "#" macro-name ("(" qualified-name ("," qualified-name)* ")")? ("?" | "!")?

macro-name ::= IDENTIFIER

alias-group ::= "as" "(" alias-pattern ")" "{" (macro | positive-prop)* "}"

alias-pattern ::= (IDENTIFIER | ("^" IDENTIFIER) | (IDENTIFIER "$")) "->" IDENTIFIER

positive-prop ::= annotation* (function-prop | regular-prop) relation-prop?

regular-prop ::= "+"? IDENTIFIER ("?" | "!")? alias?

function-prop ::= IDENTIFIER ("(" (named-parameter | value) ("," named-parameter)* ")") ((annotation* dto-body) | alias)?

relation-prop ::= dto-body "*"?

negative-prop ::= "-" IDENTIFIER

user-prop ::= annotation* IDENTIFIER ":" type-def

type-def ::= qualified-name generic-args? "?"?

generic-args ::= "<" generic-arg ("," generic-arg)* ">"

generic-arg ::= "*" | MODIFIER? type-def

/// GLOBAL ///
qualified-name ::= IDENTIFIER ("." IDENTIFIER)*

// parameter
named-parameter ::= parameter-name "=" value

parameter-name ::= IDENTIFIER

value ::= CHAR_CONSTANT | STRING_CONSTANT | IDENTIFIER |
             INTEGER_CONSTANT | FLOAT_CONSTANT |
             BOOLEAN_CONSTANT | NULL_CONSTANT |
             array-value

array-value ::= "[" (value ("," value)*)? "]" | "{" (value ("," value)*)? "}"

// alias
alias ::= "as" IDENTIFIER

// annotation
annotation ::= annotation-constructor ("(" (annotation-value | annotation-parameter) ("," annotation-parameter)* ")")?

annotation-constructor ::= "@" qualified-name

nest-annotation ::= qualified-name "(" ((annotation-value | annotation-parameter) ("," annotation-parameter)*)? ")"

// annotation parameter
annotation-parameter ::= IDENTIFIER "=" annotation-value

annotation-value ::= CHAR_CONSTANT | STRING_CONSTANT |
             INTEGER_CONSTANT | FLOAT_CONSTANT |
             BOOLEAN_CONSTANT | NULL_CONSTANT |
             annotation | nest-annotation | annotation-array-value

annotation-array-value ::= "[" (annotation-value ("," annotation-value)*)? "]" | "{" (annotation-value ("," annotation-value)*)? "}"

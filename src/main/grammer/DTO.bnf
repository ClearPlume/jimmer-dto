{
  parserClass="net.fallingangel.jimmerdto.parser.DTOParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="DTO"
  psiImplClassSuffix="Impl"
  psiPackage="net.fallingangel.jimmerdto.psi"
  psiImplPackage="net.fallingangel.jimmerdto.psi.impl"

  elementTypeHolderClass="net.fallingangel.jimmerdto.psi.DTOTypes"
  elementTypeClass="net.fallingangel.jimmerdto.psi.DTOElementType"
  tokenTypeClass="net.fallingangel.jimmerdto.psi.DTOTokenType"

  psiImplUtilClass="net.fallingangel.jimmerdto.psi.impl.DTOPsiImplUtil"

  tokens=[
    COMMA=","
    DOT="."
    AT="@"
    EQUALS="="
    COLON=":"
    SEMICOLON=";"
    HASH="#"
    PLUS="+"
    MINUS="-"
    OPTIONAL="?"
    REQUIRED="!"
    ASTERISK="*"
    POWER="^"
    DOLLAR="$"
    ARROW="->"
    SLASH="/"
    PAREN_L="("
    PAREN_R=")"
    BRACKET_L="["
    BRACKET_R="]"
    ANGLE_BRACKET_L="<"
    ANGLE_BRACKET_R=">"
    BRACE_L="{"
    BRACE_R="}"

    IDENTIFIER="regexp:[$A-Za-z_][$\\w]*"
    EXPORT_KEYWORD="export"
    PACKAGE_KEYWORD="package"
    IMPORT_KEYWORD="import"
    THIS_KEYWORD="this"
    AS_KEYWORD="as"

    BOOLEAN_CONSTANT="regexp:true|false"
    NULL_CONSTANT="null"
    INTEGER_CONSTANT="regexp:\\d+"
    FLOAT_CONSTANT="regexp:\\d+\\.\\d+"
    STRING_CONSTANT="regexp:\"[^\"]*\""
    CHAR_CONSTANT="regexp:'[^']'"
  ]
}

dto-file ::= export? import* dto*

export ::= "export" qualified-type ("->" package)?

package ::= "package" qualified-type

import ::= "import" qualified-type grouped-types?

grouped-types ::= "." "{" qualified-type ("," qualified-type)* "}"

dto ::= annotation* dto-modifier* dto-name dto-supers? dto-body {
    pin = 3
}

dto-modifier ::= MODIFIER

dto-name ::= IDENTIFIER

dto-supers ::= ":" dto-name ("," dto-name)* {
    pin = 1
}

dto-body ::= "{" explicit-prop* "}"

explicit-prop ::= (user-prop | macro | positive-prop | alias-group | negative-prop) ("," | ";")?

macro ::= "#" macro-name macro-args? ("?" | "!")? {
    pin = 1
}

macro-name ::= IDENTIFIER

macro-args ::= "(" ( macro-this | qualified-name) ("," ( macro-this | qualified-name))* ")"

macro-this ::= THIS_KEYWORD

alias-group ::= "as" "(" alias-pattern ")" alias-group-body

alias-group-body ::= "{" (macro | positive-prop)* "}"

alias-pattern ::= original "->" replacement {
    pin = 2
}

original ::= IDENTIFIER | "^"? IDENTIFIER? "$"?

replacement ::= IDENTIFIER

positive-prop ::= annotation* "+"? prop-name prop-flags? prop-args? ("?" | "!" | "*")? ("as" prop-alias)? (enum-body | prop-body)? {
    pin = 3
    mixin="net.fallingangel.jimmerdto.psi.impl.DTONamedElementImpl"
    implements="net.fallingangel.jimmerdto.psi.DTONamedElement"
    methods=[getNameIdentifier getName setName]
}

prop-name ::= IDENTIFIER

prop-flags ::= "/" "i$"? "i"? POWER? DOLLAR?

//prop-args ::= "(" (named-parameter | value) ("," (named-parameter | value))* ")"
prop-args ::= "(" value ("," value)* ")"

prop-alias ::= IDENTIFIER

prop-body ::= annotation* dto-body {
    pin = 2
}

enum-body ::= "->" "{" enum-instance-mapping? (("," | ";")? enum-instance-mapping)* "}"

enum-instance-mapping ::= enum-instance ":" enum-instance-value {
    pin = 1
}

enum-instance ::= IDENTIFIER

enum-instance-value ::= (INTEGER_CONSTANT | STRING_CONSTANT)

negative-prop ::= "-" IDENTIFIER {
    pin = 1
}

user-prop ::= annotation* IDENTIFIER ":" type-def {
    pin = 3
}

type-def ::= qualified-name generic-args? "?"?

generic-args ::= "<" generic-arg ("," generic-arg)* ">" {
    pin = 1
}

generic-arg ::= "*" | MODIFIER? type-def

/// GLOBAL ///
qualified-name ::= qualified-name-part ("." qualified-name-part)*

qualified-name-part ::= IDENTIFIER {
    pin = 1
}

qualified-type ::= qualified-type-name ("as" qualified-type-alias)?

qualified-type-name ::= qualified-name

qualified-type-alias ::= IDENTIFIER

// parameter
//named-parameter ::= parameter-name "=" value

//parameter-name ::= IDENTIFIER

value ::= CHAR_CONSTANT | STRING_CONSTANT |
             INTEGER_CONSTANT | FLOAT_CONSTANT |
             BOOLEAN_CONSTANT | NULL_CONSTANT |
             enum-value | IDENTIFIER | array-value

enum-value ::= IDENTIFIER ("." IDENTIFIER)+

array-value ::= "[" (value ("," value)*)? "]" | "{" (value ("," value)*)? "}"

// annotation
annotation ::= annotation-constructor ("(" (annotation-value | annotation-parameter) ("," annotation-parameter)* ")")?

annotation-constructor ::= "@" qualified-name

nest-annotation ::= qualified-name "(" ((annotation-value | annotation-parameter) ("," annotation-parameter)*)? ")"

// annotation parameter
annotation-parameter ::= IDENTIFIER "=" annotation-value

annotation-value ::= CHAR_CONSTANT | STRING_CONSTANT |
             INTEGER_CONSTANT | FLOAT_CONSTANT |
             BOOLEAN_CONSTANT | NULL_CONSTANT |
             annotation | nest-annotation | enum-value | annotation-array-value

annotation-array-value ::= "[" (annotation-value ("," annotation-value)*)? "]" | "{" (annotation-value ("," annotation-value)*)? "}"

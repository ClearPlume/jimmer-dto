{
  parserClass="net.fallingangel.jimmerdto.parser.DTOParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="DTO"
  psiImplClassSuffix="Impl"
  psiPackage="net.fallingangel.jimmerdto.psi"
  psiImplPackage="net.fallingangel.jimmerdto.psi.impl"

  elementTypeHolderClass="net.fallingangel.jimmerdto.psi.DTOTypes"
  elementTypeClass="net.fallingangel.jimmerdto.psi.DTOElementType"
  tokenTypeClass="net.fallingangel.jimmerdto.psi.DTOTokenType"

  psiImplUtilClass="net.fallingangel.jimmerdto.util.DTOPsiUtil"

  tokens=[
    COMMA=","
    DOT="."
    AT="@"
    EQUALS="="
    COLON=":"
    SEMICOLON=";"
    HASH="#"
    PLUS="+"
    MINUS="-"
    OPTIONAL="?"
    REQUIRED="!"
    ASTERISK="*"
    POWER="^"
    DOLLAR="$"
    ARROW="->"
    SLASH="/"
    CLASS_REFERENCE="::"
    PAREN_L="("
    PAREN_R=")"
    BRACKET_L="["
    BRACKET_R="]"
    ANGLE_BRACKET_L="<"
    ANGLE_BRACKET_R=">"
    BRACE_L="{"
    BRACE_R="}"

    IDENTIFIER="regexp:[$A-Za-z_][$\\w]*"
    EXPORT_KEYWORD="export"
    PACKAGE_KEYWORD="package"
    IMPORT_KEYWORD="import"
    THIS_KEYWORD="this"
    AS_KEYWORD="as"
    CLASS_KEYWORD="class"
    IMPLEMENTS_KEYWORD="implements"

    BOOLEAN_CONSTANT="regexp:true|false"
    NULL_CONSTANT="null"
    INTEGER_CONSTANT="regexp:\\d+"
    FLOAT_CONSTANT="regexp:\\d+\\.\\d+"
    STRING_CONSTANT="regexp:\"[^\"]*\""
    CHAR_CONSTANT="regexp:'[^']'"
  ]
}

dto-file ::= export? import* dto*

export ::= "export" qualified-type ("->" package)?

package ::= "package" qualified-type

import ::= "import" qualified-type grouped-types?

grouped-types ::= "." "{" qualified-type ("," qualified-type)* "}"

dto ::= annotation* modifier* dto-name interfaces? dto-body {
    pin = 3
}

dto-name ::= IDENTIFIER

dto-body ::=
"{"
    (user-prop | macro | positive-prop | alias-group | negative-prop) (("," | ";")? (user-prop | macro | positive-prop | alias-group | negative-prop) ("," | ";")?)*
"}"

macro ::= "#" macro-name macro-args? ("?" | "!")? {
    pin = 1
}

macro-name ::= IDENTIFIER

macro-args ::= "(" ( macro-this | qualified-name-part) ("," ( macro-this | qualified-name-part))* ")"

macro-this ::= THIS_KEYWORD

alias-group ::= "as" "(" alias-pattern ")" alias-group-body

alias-group-body ::= "{" (macro | positive-prop)* "}"

alias-pattern ::= original "->" replacement? {
    pin = 2
}

original ::= alias-power? IDENTIFIER? alias-dollar?

alias-power ::= POWER

alias-dollar ::= DOLLAR

replacement ::= STRING_CONSTANT | IDENTIFIER

positive-prop ::= annotation* "+"? modifier? prop-name prop-flags? prop-args? ("?" | "!" | "*")? ("as" prop-alias)? interfaces? (enum-body | prop-body)? {
    pin = 4
    implements="net.fallingangel.jimmerdto.psi.mixin.DTOSingleProp"
    mixin="net.fallingangel.jimmerdto.psi.mixin.impl.DTOSinglePropImpl"
}

prop-name ::= IDENTIFIER | "null"

prop-flags ::= "/" "i$"? "i"? POWER? DOLLAR?

//prop-args ::= "(" (named-parameter | value) ("," (named-parameter | value))* ")"
prop-args ::= "(" value ("," value)* ")"

prop-alias ::= IDENTIFIER

prop-body ::= annotation* dto-body {
    pin = 2
}

enum-body ::= "->" "{" enum-instance-mapping? (("," | ";")? enum-instance-mapping)* "}"

enum-instance-mapping ::= enum-instance ":" enum-instance-value {
    pin = 1
}

enum-instance ::= IDENTIFIER

enum-instance-value ::= (INTEGER_CONSTANT | STRING_CONSTANT)

negative-prop ::= "-" prop-name {
    pin = 2
    implements="net.fallingangel.jimmerdto.psi.mixin.DTOSingleProp"
    mixin="net.fallingangel.jimmerdto.psi.mixin.impl.DTOSinglePropImpl"
}

user-prop ::= annotation* prop-name ":" type-def {
    pin = 3
}

generic-args ::= "<" generic-arg ("," generic-arg)* ">" {
    pin = 1
}

generic-arg ::= "*" | modifier? type-def

/// GLOBAL ///
modifier ::= "input" | "specification" | "abstract" | "unsafe" | "dynamic" | "fixed" | "static" | "fuzzy"| "out" | "in"

qualified-name ::= qualified-name-part ("." qualified-name-part)*

qualified-name-part ::= IDENTIFIER

qualified-type ::= qualified-name ("as" qualified-type-alias)?

qualified-type-alias ::= IDENTIFIER

// parameter
//named-parameter ::= parameter-name "=" value

//parameter-name ::= IDENTIFIER

value ::= CHAR_CONSTANT | STRING_CONSTANT |
             INTEGER_CONSTANT | FLOAT_CONSTANT |
             BOOLEAN_CONSTANT | NULL_CONSTANT |
             class-value | enum-value | IDENTIFIER | array-value

enum-value ::= IDENTIFIER ("." IDENTIFIER)+

class-value ::= qualified-name "?"? ("." | "::") "class" {
    pin = 3
}

array-value ::= "[" (value ("," value)*)? "]" | "{" (value ("," value)*)? "}"

// annotation
annotation ::= annotation-constructor ("(" (annotation-value | annotation-parameter) ("," annotation-parameter)* ")")? {
    pin = 1
}

annotation-constructor ::= "@" annotation-name {
    pin = 1
}

annotation-name ::= IDENTIFIER ("." IDENTIFIER)* {
    pin = 1
}

nest-annotation ::= "@"? annotation-name "(" ((annotation-value | annotation-parameter) ("," annotation-parameter)*)? ")" {
    pin = 3
}

// annotation parameter
annotation-parameter ::= IDENTIFIER "=" annotation-value {
    pin = 1
}

annotation-value ::= CHAR_CONSTANT | STRING_CONSTANT |
             INTEGER_CONSTANT | FLOAT_CONSTANT |
             BOOLEAN_CONSTANT | NULL_CONSTANT |
             nest-annotation | annotation | class-value | enum-value | annotation-array-value

annotation-array-value ::= "[" (annotation-value ("," annotation-value)*)? "]" | "{" (annotation-value ("," annotation-value)*)? "}"

type-def ::= qualified-name generic-args? "?"?

interfaces ::= "implements" type-def ("," type-def)* {
    pin = 1
}
